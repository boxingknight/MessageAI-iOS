//
//  ConversationSummary.swift
//  messAI
//
//  Created for PR #16: Decision Summarization Feature
//  Conversation summary with decisions, action items, and key points
//

import Foundation

/**
 * Conversation summary generated by AI
 *
 * Contains structured summary of a group conversation including:
 * - Overview (high-level summary)
 * - Decisions made
 * - Action items (tasks to complete)
 * - Key points (other important info)
 *
 * Example: "Parent meeting moved to Friday 3pm, bake sale volunteers needed"
 */
struct ConversationSummary: Identifiable, Codable, Equatable {
    // MARK: - Properties
    
    /// Unique identifier for this summary
    let id: String
    
    /// Conversation this summary belongs to
    let conversationId: String
    
    /// High-level overview (1-2 sentences)
    let overview: String
    
    /// Key decisions made by the group
    let decisions: [String]
    
    /// Action items (tasks with optional assignee/deadline)
    let actionItems: [ActionItem]
    
    /// Other important information
    let keyPoints: [String]
    
    /// Number of messages analyzed
    let messageCount: Int
    
    /// When this summary was generated
    let generatedAt: Date
    
    /// When this summary expires (cache TTL: 5 minutes)
    let expiresAt: Date
    
    // MARK: - Initialization
    
    init(
        id: String,
        conversationId: String,
        overview: String,
        decisions: [String],
        actionItems: [ActionItem],
        keyPoints: [String],
        messageCount: Int,
        generatedAt: Date,
        expiresAt: Date
    ) {
        self.id = id
        self.conversationId = conversationId
        self.overview = overview
        self.decisions = decisions
        self.actionItems = actionItems
        self.keyPoints = keyPoints
        self.messageCount = messageCount
        self.generatedAt = generatedAt
        self.expiresAt = expiresAt
    }
    
    // MARK: - Firestore Conversion
    
    /// Convert from Firestore dictionary
    init?(dictionary: [String: Any]) {
        guard let id = dictionary["id"] as? String,
              let conversationId = dictionary["conversationId"] as? String,
              let overview = dictionary["overview"] as? String,
              let messageCount = dictionary["messageCount"] as? Int else {
            return nil
        }
        
        self.id = id
        self.conversationId = conversationId
        self.overview = overview
        self.messageCount = messageCount
        
        // Parse decisions (array of strings)
        self.decisions = dictionary["decisions"] as? [String] ?? []
        
        // Parse action items (array of dictionaries)
        if let actionItemDicts = dictionary["actionItems"] as? [[String: Any]] {
            self.actionItems = actionItemDicts.compactMap { ActionItem(dictionary: $0) }
        } else {
            self.actionItems = []
        }
        
        // Parse key points (array of strings)
        self.keyPoints = dictionary["keyPoints"] as? [String] ?? []
        
        // Parse dates
        let isoFormatter = ISO8601DateFormatter()
        isoFormatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        
        // Try parsing generatedAt
        if let generatedAtString = dictionary["generatedAt"] as? String,
           let date = isoFormatter.date(from: generatedAtString) {
            self.generatedAt = date
        } else {
            // Fallback to current date
            self.generatedAt = Date()
        }
        
        // Try parsing expiresAt
        if let expiresAtString = dictionary["expiresAt"] as? String,
           let date = isoFormatter.date(from: expiresAtString) {
            self.expiresAt = date
        } else {
            // Fallback to 5 minutes from now
            self.expiresAt = Date().addingTimeInterval(5 * 60)
        }
    }
    
    /// Convert to Firestore dictionary
    func toDictionary() -> [String: Any] {
        let isoFormatter = ISO8601DateFormatter()
        isoFormatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        
        return [
            "id": id,
            "conversationId": conversationId,
            "overview": overview,
            "decisions": decisions,
            "actionItems": actionItems.map { $0.toDictionary() },
            "keyPoints": keyPoints,
            "messageCount": messageCount,
            "generatedAt": isoFormatter.string(from: generatedAt),
            "expiresAt": isoFormatter.string(from: expiresAt)
        ]
    }
    
    // MARK: - Computed Properties
    
    /// Is this summary expired? (older than 5 minutes)
    var isExpired: Bool {
        return Date() > expiresAt
    }
    
    /// Time remaining until expiration (in seconds)
    var timeUntilExpiration: TimeInterval {
        return expiresAt.timeIntervalSince(Date())
    }
    
    /// Has decisions?
    var hasDecisions: Bool {
        return !decisions.isEmpty
    }
    
    /// Has action items?
    var hasActionItems: Bool {
        return !actionItems.isEmpty
    }
    
    /// Has key points?
    var hasKeyPoints: Bool {
        return !keyPoints.isEmpty
    }
    
    /// Has any content?
    var hasContent: Bool {
        return hasDecisions || hasActionItems || hasKeyPoints
    }
    
    /// Total items count (decisions + action items + key points)
    var totalItemsCount: Int {
        return decisions.count + actionItems.count + keyPoints.count
    }
    
    // MARK: - Display Helpers
    
    /// Formatted generated time
    /// Examples: "2 minutes ago", "Just now", "5 minutes ago"
    var generatedTimeAgo: String {
        let formatter = RelativeDateTimeFormatter()
        formatter.unitsStyle = .full
        return formatter.localizedString(for: generatedAt, relativeTo: Date())
    }
    
    /// Short generated time
    /// Examples: "2m ago", "Just now", "5m ago"
    var shortGeneratedTimeAgo: String {
        let seconds = Date().timeIntervalSince(generatedAt)
        
        if seconds < 60 {
            return "Just now"
        } else if seconds < 3600 {
            let minutes = Int(seconds / 60)
            return "\(minutes)m ago"
        } else {
            let hours = Int(seconds / 3600)
            return "\(hours)h ago"
        }
    }
    
    /// Message count text
    /// Examples: "50 messages", "1 message", "10 messages"
    var messageCountText: String {
        return messageCount == 1 ? "1 message" : "\(messageCount) messages"
    }
}

// MARK: - Preview Helpers

#if DEBUG
extension ConversationSummary {
    /// Sample summary for SwiftUI previews
    static let sample = ConversationSummary(
        id: "summary_123",
        conversationId: "conv_456",
        overview: "Parent meeting moved to Friday 3pm. Bake sale volunteers needed for Saturday.",
        decisions: [
            "Meeting moved from Thursday to Friday",
            "Budget of $500 approved",
            "New playground equipment approved"
        ],
        actionItems: [
            ActionItem(id: "action_1", description: "Bring cookies", assignee: "Sarah", deadline: "Friday"),
            ActionItem(id: "action_2", description: "Set up tables", assignee: "Mike", deadline: nil),
            ActionItem(id: "action_3", description: "Send invitations", assignee: nil, deadline: "Wednesday")
        ],
        keyPoints: [
            "Meeting location: School cafeteria",
            "RSVP required by Thursday",
            "Parking available in Lot B"
        ],
        messageCount: 50,
        generatedAt: Date().addingTimeInterval(-120), // 2 minutes ago
        expiresAt: Date().addingTimeInterval(180) // 3 minutes from now
    )
    
    /// Empty summary (no content)
    static let empty = ConversationSummary(
        id: "summary_empty",
        conversationId: "conv_789",
        overview: "No significant decisions or action items detected.",
        decisions: [],
        actionItems: [],
        keyPoints: [],
        messageCount: 10,
        generatedAt: Date(),
        expiresAt: Date().addingTimeInterval(300)
    )
    
    /// Summary with only decisions
    static let decisionsOnly = ConversationSummary(
        id: "summary_decisions",
        conversationId: "conv_101",
        overview: "Group agreed on meeting details.",
        decisions: [
            "Meeting scheduled for Friday at 3pm",
            "Location changed to Room 204"
        ],
        actionItems: [],
        keyPoints: [],
        messageCount: 25,
        generatedAt: Date(),
        expiresAt: Date().addingTimeInterval(300)
    )
    
    /// Summary with only action items
    static let actionItemsOnly = ConversationSummary(
        id: "summary_actions",
        conversationId: "conv_202",
        overview: "Tasks assigned for upcoming event.",
        decisions: [],
        actionItems: [
            ActionItem(id: "action_1", description: "Bring snacks", assignee: "John", deadline: "Saturday"),
            ActionItem(id: "action_2", description: "Reserve venue", assignee: "Lisa", deadline: "Tomorrow")
        ],
        keyPoints: [],
        messageCount: 30,
        generatedAt: Date(),
        expiresAt: Date().addingTimeInterval(300)
    )
}
#endif

