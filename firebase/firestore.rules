rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function: Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function: Check if user is participant in conversation
    function isParticipant(conversationId) {
      return isAuthenticated() && 
             request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // Helper function: Check if user is admin in group conversation (PR #13)
    function isAdmin(conversationData) {
      return isAuthenticated() && 
             conversationData.isGroup == true &&
             ('admins' in conversationData) &&
             request.auth.uid in conversationData.admins;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // Users can only write their own profile
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Can read if you're a participant
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      
      // Can create if you include yourself as participant
      // PR #13: Allow groups with 3-50 participants
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.participants is list &&
                       request.resource.data.participants.size() >= 2 &&
                       request.resource.data.participants.size() <= 50;
      
      // Can update if you're a participant (for lastMessage, etc.)
      // PR #13: Allow admins to update group settings
      allow update: if isAuthenticated() && (
                       // Participant can update lastMessage fields
                       (request.auth.uid in resource.data.participants &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageAt', 'lastMessageSenderId', 'unreadCount']))
                       ||
                       // Admin can manage group (participants, admins, name, photo)
                       (isAdmin(resource.data) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'admins', 'groupName', 'groupPhotoURL']))
                     );
      
      // Can delete if you're a participant
      // Note: In production, consider implementing soft-delete instead
      // (marking conversation as deleted per user rather than hard delete)
      allow delete: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Can read messages if you're in the conversation
        allow read: if isParticipant(conversationId);
        
        // Can create message if:
        // - You're in the conversation
        // - You're the sender
        // - Message has required fields
        allow create: if isParticipant(conversationId) &&
                         request.auth.uid == request.resource.data.senderId &&
                         request.resource.data.text is string &&
                         request.resource.data.sentAt is timestamp;
        
        // Can update message if you're the sender OR updating status/tracking fields
        // PR #11: Added deliveredTo and readBy for recipient tracking
        // PR #11 Fix: Use diff().affectedKeys() to check only changed fields, not all fields
        // PR #15: Added aiMetadata and updatedAt for AI features (calendar extraction, etc.)
        allow update: if isParticipant(conversationId) &&
                         (request.auth.uid == resource.data.senderId || 
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveredAt', 'readAt', 'deliveredTo', 'readBy', 'aiMetadata', 'updatedAt']));
        
        // Can delete if you're the sender
        allow delete: if isParticipant(conversationId) &&
                         request.auth.uid == resource.data.senderId;
      }
    }
    
    // Presence collection (PR #12)
    match /presence/{userId} {
      // Anyone authenticated can read presence
      allow read: if isAuthenticated();
      
      // Users can only write their own presence
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Typing indicators collection (PR #12)
    match /typing/{typingId} {
      // Anyone authenticated can read typing status
      // typingId format: {conversationId}_{userId}
      allow read: if isAuthenticated();
      
      // Users can only write their own typing status
      // Must include userId, conversationId, isTyping, startedAt
      allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.conversationId is string &&
                      request.resource.data.isTyping is bool &&
                      request.resource.data.startedAt is timestamp;
    }
    
    // Deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

